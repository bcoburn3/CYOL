(defpackage :CYOL)

(in-package :CYOL)

(eval-when (:compile-toplevel :execute)
  (ql:quickload :cl-ppcre))

(eval-when (:execute)
  (let ((tokens (tokenize (file-to-string "c:\\ben\\code\\CYOL\\test2.txt"))))
    (print tokens)
    (print (length tokens))
    (let ((tree (run-parser tokens)))
      (print tree))))
      ;(print (mapcar #'reverse-tree tree)))))

(eval-when (:execute)
  (print (tokenize (file-to-string "c:\\ben\\code\\CYOL\\test2.txt"))))

(defun reverse-tree (tree)
  ;recursively reverses every list in a tree except the final leaf nodes
  (if (listp tree)
      (loop for sub in tree
	 with res = '()
	 do (if (listp sub)
		(if (listp (car sub))
		    (push (reverse-tree sub) res)
		    (push sub res))
		(push sub res))
     finally (return res))))

#|

(((KEYWORD "if") 
  (IDENTIFIER "tasty") 
  (((OPERATOR "==") 
    (CONSTANT "True")) 
   (INDENT 1) 
   (IDENTIFIER "print") 
   (STRING "Delicious!"))) 
 (NEWLINE "\\n") 
 (NEWLINE "\\n") 
 ((KEYWORD "if") 
  (NUMBER "1") 
  ((INDENT 1) 
   ((KEYWORD "if") 
    (NUMBER "2") 
    ((INDENT 2) 
     (NIL-RECEIVER-CALL 
      (IDENTIFIER "print") VALUE #\() 
     (STRING "...") 
     (VALUE #\)) 
     (NEWLINE "\\n") 
     ((KEYWORD "if") 
      (KEYWORD "false") 
      ((INDENT 3) 
       (IDENTIFIER "pass"))) 
     (NEWLINE "\\n") 
     (NIL-RECEIVER-CALL 
      (IDENTIFIER "print") 
      VALUE #\() 
     (STRING "done!") 
     (VALUE #\)))) 
   (NUMBER "2")))

(((KEYWORD "if") 
  (VALUE #\() 
  ((IDENTIFIER "tasty") 
   ((OPERATOR "==") 
    (CONSTANT "True")) 
   (VALUE #\)) 
   (INDENT 1) 
   (IDENTIFIER "print") 
   (STRING "Delicious!"))) 
 ((KEYWORD "if") 
  (NUMBER "1") 
  ((INDENT 1) 
   ((KEYWORD "if") 
    (NUMBER "2") 
    ((INDENT 2) 
     (NIL-RECEIVER-CALL 
      (IDENTIFIER "print") 
      VALUE #\() 
     (STRING "...") 
     (VALUE #\)) 
     (NEWLINE "\\n") 
     ((KEYWORD "if") 
      (KEYWORD "false") 
      ((INDENT 3) 
       (IDENTIFIER "pass"))) 
     (NEWLINE "\\n") 
     (NIL-RECEIVER-CALL 
      (IDENTIFIER "print") 
      VALUE #\() 
     (STRING "done!") 
     (VALUE #\)))) 
   (NEWLINE "\\n") 
   (NUMBER "2")))

(((KEYWORD "if") 
  (VALUE #\() 
  (((IDENTIFIER "tasty") 
    ((OPERATOR "==") 
     (CONSTANT "True")) 
    (VALUE #\)) 
    (INDENT 1) 
    (IDENTIFIER "print") (STRING "Delicious!")))) (NEWLINE "\\n") (NEWLINE "\\n") ((KEYWORD "if") (NUMBER "1") (((INDENT 1) ((KEYWORD "if") (NUMBER "2") (((INDENT 2) (NIL-RECEIVER-CALL (IDENTIFIER "print") VALUE #\() (STRING "...") (VALUE #\)) (NEWLINE "\\n") ((KEYWORD "if") (KEYWORD "false") (((INDENT 3) (IDENTIFIER "pass")))) (NEWLINE "\\n") (NIL-RECEIVER-CALL (IDENTIFIER "print") VALUE #\() (STRING "done!") (VALUE #\))))) (NEWLINE "\\n") (NUMBER "2")))) (NEWLINE "\\n") (NEWLINE "\\n") (NEWLINE "\\n"))

(((KEYWORD "if") 
  (IDENTIFIER "tasty") 
  ((((OPERATOR "==") 
     (CONSTANT "True")) (VALUE #\)) (INDENT 1) (IDENTIFIER "print") (STRING "Delicious!")))) (NEWLINE "\\n") (NEWLINE "\\n") ((KEYWORD "if") (INDENT 1) ((((KEYWORD "if") (INDENT 2) (((NIL-RECEIVER-CALL (IDENTIFIER "print") VALUE #\() (STRING "...") (VALUE #\)) (NEWLINE "\\n") ((KEYWORD "if") (INDENT 3) (((IDENTIFIER "pass")))) (NEWLINE "\\n") (NIL-RECEIVER-CALL (IDENTIFIER "print") VALUE #\() (STRING "done!") (VALUE #\))))) (NEWLINE "\\n") (NUMBER "2")))) (NEWLINE "\\n") (NEWLINE "\\n") (NEWLINE "\\n"))

|#
